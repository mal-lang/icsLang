/*
 * Copyright 2020-2021 icsLang contributors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

include "org.mal-lang.coreLang/coreLang.mal"
include "ics/Controller.mal"
include "ics/ControlServer.mal"
include "ics/DataHistorian.mal"
include "ics/EngineeringWorkstation.mal"
include "ics/HMI.mal"
include "ics/IOServer.mal"
include "ics/SIS.mal"

category ComputeResources {

    asset IcsSystem extends System
      user info: "An ICS System extends the coreLang's System with more attack vectors."
      developer info: "For example, the attacker can additionally peform ATT&CK ICS T847 'Replication Through Removable Media', T862 'Supply Chain Attack' and more."
    {

      | physicalAccess @Override
        +>  moduleFirmware,
            systemFirmware

      | fullAccess @Override
        +>  lossOfSafety,
            lossOfControl,
            lossOfAvailability,
            manipulationOfView,
            manipulationOfControl

      & moduleFirmware
        user info: "Adversaries may install malicious or vulnerable firmware onto modular hardware devices. Control system devices often contain modular hardware devices."
        developer info: "MITRE ATT&CK ICS T839."
        ->  bypassAccessControl

      # moduleFirmwareVerification
        user info: "Verify the module's firmwares from the main firmware upon boot-up or during normal operation. Mitigation for MITRE ATT&CK ICS T839."
        developer info: "Mitigation was vaguely listed on MITRE ATT&CK ICS."
        ->  moduleFirmware

      # useCryptographyKeyForFirmware
        user info: "If a cryptographic key is used for firmware updates, the firmware will be harder to be altered. Mitigation for MITRE ATT&CK ICS T839 and T857."
        developer info: "Mitigation was listed on MITRE ATT&CK ICS."
        ->  moduleFirmware,
            systemFirmware

      # useAuthenticatedFirmwareUpdates
        user info: "If authentication of the source and data is performed, malicious firmware alteration will be significantly harder. Mitigation for MITRE ATT&CK ICS T839 and T857."
        developer info: "Mitigation was listed on MITRE ATT&CK ICS."
        ->  moduleFirmware,
            systemFirmware

      & systemFirmware
        user info: "An adversary may exploit the firmware update feature on accessible devices to upload malicious or out-of-date firmware."
        developer info: "MITRE ATT&CK ICS T857."
        ->  bypassAccessControl

      | deny @Override {A}
        +>  lossOfAvailability

      !E sisConnected @hidden
        developer info: "If the ICS system is not connected to an SIS the safety mechanisms should be disabled"
        <-  sis
        ->  safetyMechanismsOffline

      // Impact attack steps
      | attemptPreemptiveShutdown @hidden
        user info: "Intermediate attack step for modelling the possibility of detecting a disruption(loss of Control/View) and preemptively shutting down the system in order to prevent damage."
        ->  attemptShutdown,
            attemptUnsafeState

      | attemptPreemptiveShutdownOnSafetyLoss @hidden
        user info: "Intermediate attack step for modelling the possibility of detecting a disruption(loss of Safety) and preemptively shutting down the system because of concerns. The loss of safety alone does not trigger either a shutdown or generate an unsafe state as control and view are expected to maintain the system operating within normal parameters."
        ->  attemptShutdown

      | attemptShutdown @hidden [Bernoulli(0.1)]
        developer info: "This is the actual preemptive shutdown operation. The specific probability should be researched more and maybe defined by the modeller."
        ->  shutdown

      | attemptUnsafeState @hidden [Bernoulli(0.1)]
        developer info: "This attack step models the possibility that a naturally occurring unsafe state is reached if there is a loss of control or view. The specific probability should be researched more and maybe defined by the modeller."
        ->  unsafeState

      | unsafeState @hidden
        developer info: "The system can only be damaged if it has reached an unsafe operating state. If the safety mechanisms are still functional the system will shutdown without taking damage, otherwise the damage done to the system will bring it down."
        ->  damageToProperty,
            shutdown

      | lossOfSafety
        user info: "Adversaries may cause loss of safety whether on purpose or as a consequence of actions taken to accomplish an operation."
        developer info: "MITRE ATT&CK ICS T880."
        ->  safetyMechanismsOffline,
            attemptPreemptiveShutdownOnSafetyLoss

      | safetyMechanismsOffline @hidden
        user info: "Physical assets should only be damaged if the safety mechanisms fail to shutdown the system to prevent damage"
        ->  damageToProperty

      | shutdown {A}
        user info: "Shutdown the system. Can be initiated by the attacker intentionally to disrupt the industrial process or unintentionally by tampering with system and accidentally triggering the safety shutdown procedures. If the staff detect anomalous behaviour and they can decide to preemptively shut the system down to prevent potential damage."
        ->  lossOfAvailability,
            criticalParentSystem.propagateCriticalShutdown,
            triggerPropagateRedundantShutdown

      | triggerPropagateRedundantShutdown @hidden
        developer info: "This is an intermediary step required for the situation where SIS redundant subsystems are disabled."
        ->  redundantParentSystem.propagateRedundantShutdown

      & damageToProperty {I, A}
        user info: "Adversaries may cause damage and destruction of property to infrastructure, equipment, and the surrounding environment when attacking control systems."
        developer info: "MITRE ATT&CK ICS T879."
        ->  shutdown,
            lossOfProductivityAndRevenue

      | lossOfControl {A}
        user info: "Adversaries may seek to achieve a sustained loss of control or a runaway condition in which operators cannot issue any commands even if the malicious interference has subsided."
        developer info: "MITRE ATT&CK ICS T827."
        ->  attemptPreemptiveShutdown,
            criticalParentSystem.propagateCriticalLossOfControl,
            redundantParentSystem.propagateRedundantLossOfControl

      | lossOfView {A}
        user info: "Adversaries may cause a sustained or permanent loss of view where the ICS equipment will require local, hands-on operator intervention."
        developer info: "MITRE ATT&CK ICS T829."
        ->  attemptPreemptiveShutdown,
            criticalParentSystem.propagateCriticalLossOfView,
            redundantParentSystem.propagateRedundantLossOfView

      | lossOfAvailability {A}
        user info: "Adversaries may attempt to disrupt essential components or systems to prevent owner and operator from delivering products or services."
        developer info: "MITRE ATT&CK ICS T826."
        ->  lossOfProductivityAndRevenue,
            criticalParentSystem.propagateCriticalLossOfAvailability,
            redundantParentSystem.propagateRedundantLossOfAvailability

      | lossOfProductivityAndRevenue
        user info: "Adversaries may cause loss of productivity and revenue through disruption and even damage to the availability and integrity of control system operations, devices, and related processes."
        developer info: "MITRE ATT&CK ICS T828."
        ->  criticalParentSystem.propagateCriticalLossOfProductivityAndRevenue,
            redundantParentSystem.propagateRedundantLossOfProductivityAndRevenue

      | manipulationOfControl {I, A}
        user info: "Adversaries may manipulate control systems devices or possibly leverage their own, to communicate with and command physical control processes."
        developer info: "MITRE ATT&CK ICS T831."
        ->  unsafeState,
            criticalParentSystem.propagateCriticalManipulationOfControl,
            redundantParentSystem.propagateRedundantManipulationOfControl

      | manipulationOfView {I, A}
        user info: "Adversaries may attempt to manipulate the information reported back to operators or controllers."
        developer info: "MITRE ATT&CK ICS T832."
        ->  unsafeState,
            criticalParentSystem.propagateCriticalManipulationOfView,
            redundantParentSystem.propagateRedundantManipulationOfView

      // Propagate subsystems attack steps
      // Critical subsystems
      | propagateCriticalShutdown @hidden
        user info: "Propagate shutdown to the parent system if any of the critical subsystems experience a shutdown"
        -> shutdown

      | propagateCriticalLossOfControl @hidden
        user info: "Propagate loss of control to the parent system if any of the critical subsystems experience a loss of control"
        -> lossOfControl

      | propagateCriticalLossOfView @hidden
        user info: "Propagate loss of view to the parent system if any of the critical subsystems experience a loss of view"
        -> lossOfView

      | propagateCriticalManipulationOfControl @hidden
        user info: "Propagate manipulation of control to the parent system if any of the critical subsystems experience a manipulation of control"
        -> manipulationOfControl

      | propagateCriticalManipulationOfView @hidden
        user info: "Propagate manipulation of view to the parent system if any of the critical subsystems experience a manipulation of view"
        -> manipulationOfView

      | propagateCriticalLossOfAvailability @hidden
        user info: "Propagate loss of availability to the parent system if any of the critical subsystems experience a loss of availability"
        -> lossOfAvailability

      | propagateCriticalLossOfProductivityAndRevenue @hidden
        user info: "Propagate loss of productivity and revenue to the parent system if any of the critical subsystems experience a loss of productivity and revenue"
        -> lossOfProductivityAndRevenue

      // Redundant subsystems
      & propagateRedundantShutdown @hidden
        user info: "Propagate shutdown to the parent system if all of the redundant subsystems experience a shutdown"
        -> shutdown

      & propagateRedundantLossOfControl @hidden
        user info: "Propagate loss of control to the parent system if all of the redundant subsystems experience a loss of control"
        -> lossOfControl

      & propagateRedundantLossOfView @hidden
        user info: "Propagate loss of view to the parent system if all of the redundant subsystems experience a loss of view"
        -> lossOfView

      & propagateRedundantManipulationOfControl @hidden
        user info: "Propagate manipulation of control to the parent system if all of the redundant subsystems experience a manipulation of control"
        -> manipulationOfControl

      & propagateRedundantManipulationOfView @hidden
        user info: "Propagate manipulation of view to the parent system if all of the redundant subsystems experience a manipulation of view"
        -> manipulationOfView

      & propagateRedundantLossOfAvailability @hidden
        user info: "Propagate loss of availability to the parent system if all of the redundant subsystems experience a loss of availability"
        -> lossOfAvailability

      & propagateRedundantLossOfProductivityAndRevenue @hidden
        user info: "Propagate loss of productivity and revenue to the parent system if all of the redundant subsystems experience a loss of productivity and revenue"
        -> lossOfProductivityAndRevenue

      # notDisabled [Enabled]
        developer info: "The probability that a particular IcsSystem is not actually present."
        modeler info: "The use case for this is removing some of the IcsSystems used to provide redundancy."
        -> lossOfControl,
           lossOfView,
           lossOfAvailability,
           lossOfProductivityAndRevenue,
           manipulationOfControl,
           manipulationOfView,
           shutdown

    }

     asset IcsApplication extends Application
      user info: "An ICS Application extends the coreLang's Application with OT attack vectors."
    {
      | specificAccess @Override
        +>  normalOperation

      | fullAccess @Override
        +>  normalOperation,
            attemptManipulation

      | normalOperation
        user info: "The state where the operational component is operating normally or seems to be operating normally (but is undetectably manipulated within the safety limits)."
        developer info: "I am not sure if we need this. But I keep it to add one more vector that we can model! (Sotirios)"
        ->  attemptCovertManipulation

      | restrictedOperation {I,A}
        user info: "When the operational component is compromised, the operation of it is affected."

      | read @Override {C}
        +>  theftOfOperationalInformation

      | deny @Override {A}
        +>  lossOfControl,
            lossOfView,
            hostSystem[IcsSystem].lossOfAvailability

      & attemptCovertManipulation [HardAndUncertain]
        user info: "If an application is operating normally it could even be the case that it is elaborately manipulated by an adversary."
        ->  attemptManipulation

      | attemptManipulation
        user info: "The adversary is actively manipulating the system outside of normal operating parameters."
        ->  manipulate

      & manipulate @hidden
        ->  manipulationOfControl,
            manipulationOfView

      // Control related attack steps (Impact)
      | manipulationOfControl {I, A}
        user info: "Adversaries may manipulate control systems devices or possibly leverage their own, to communicate with and command physical control processes."
        developer info: "MITRE ATT&CK ICS T831."
        ->  restrictedOperation,
            transmittedControlSignal.manipulateSignal,
            sentData[IcsControlData].attemptWrite,
            hostSystem[IcsSystem].manipulationOfControl,
            hostSystem[IcsSystem].unsafeState

      | lossOfControl {A}
        user info: "Adversaries may seek to achieve a sustained loss of control or a runaway condition in which operators cannot issue any commands even if the malicious interference has subsided."
        developer info: "MITRE ATT&CK ICS T827."
        ->  restrictedOperation,
            transmittedControlSignal.blockSignal,
            sentData[IcsControlData].attemptDeny,
            hostSystem[IcsSystem].lossOfControl,
            hostSystem[IcsSystem].attemptPreemptiveShutdown

      // View related attack steps (Impact)
      | manipulationOfView {I, A}
        user info: "Adversaries may attempt to manipulate the information reported back to operators or controllers."
        developer info: "MITRE ATT&CK ICS T832."
        ->  restrictedOperation,
            transmittedSignal.manipulateSignal,
            sentData[IcsData].attemptWrite,
            hostSystem[IcsSystem].manipulationOfView,
            hostSystem[IcsSystem].unsafeState

      | lossOfView {A}
        user info: "Adversaries may cause a sustained or permanent loss of view where the ICS equipment will require local, hands-on operator intervention."
        developer info: "MITRE ATT&CK ICS T829."
        ->  restrictedOperation,
            transmittedSignal.blockSignal,
            sentData[IcsData].attemptDeny,
            hostSystem[IcsSystem].lossOfView,
            hostSystem[IcsSystem].attemptPreemptiveShutdown

      // Other types of Impact
      | theftOfOperationalInformation {C}
        user info: "Adversaries may steal operational information on a production environment as a direct mission outcome for personal gain or to inform future operations."
        developer info: "MITRE ATT&CK ICS T882."

    }

    asset Sensor
      user info: "An object that generates data (via a signal) but may not have any associated software or host."
      modeler info: "It would be vulnerable to an attacker that can gain physical access to it."
    {
      | physicalAccess
        user info: "Attacker has physical access on the location where the sensor is physically deployed."
        ->  signal.manipulateSignal,
            signal.blockSignal,
            data.attemptWrite,
            data.attemptDeny,
            system.lossOfView,
            system.manipulationOfView
    }

    asset Actuator
      user info: "An object that consumes data (from a signal) but may not have any associated software or host."
    {
      | manipulate {I, A}
        user info: "If the signal that is consumed by this actuator is manipulated then the actuator is also manipulated."
        developer info: "This will lead to manipulation of control on the associated system."
        ->  system.manipulationOfControl

      | block {A}
        user info: "If the signal that is consumed by this actuator is blocked then the actuator is also blocked."
        developer info: "This will lead to loss of control and loss of availability on the associated system."
        ->  system.lossOfControl
    }

    asset SynchronizationModule
      user info: "This asset represents any component that provides synchronization capabilities, as for example a GPS receiver or a network-based synchronization module."
    {
      | compromise
        ->  manipulateClockFrequency,
            manipulateTime,
            stopClock

      | manipulateClockFrequency
        ->  synchronizedApp.manipulationOfControl,
            synchronizedApp.manipulationOfView

      | manipulateTime
        ->  synchronizedApp.manipulationOfControl,
            synchronizedApp.manipulationOfView

      | stopClock
        ->  synchronizedApp.lossOfControl,
            synchronizedApp.lossOfView
    }

  }

  category DataResources {

    asset Signal
      user info: "A signal represents information that is sent between two assets but the medium over which is transmitted is not relevant to the model."
      modeler info: "In the case where data or information are transmitted over a known medium, the IcsData asset and the DataInTransit association should be used instead."
      developer info: "The basic attack steps of this asset were inspired by the attack steps of the data asset in coreLang."
    {
      // Basic attack steps below
      | attemptAccess
          user info: "Attempt to access the data, this might fail if the 'dataNotPresent' defense is used."
          ->  access

        & access
          user info: "Access the data."
          ->  attemptRead,
              attemptWrite,
              attemptDelete

        !E dataEncrypted @hidden
          user info: "If the data are encrypted then accessing them requires the associated encryption credentials/key."
          developer info: "Data will be considered as encrypted if there is at least one Credentials instance associated with it. Otherwise, 'accessUnencryptedData' is reached."
          <-  encryptCreds
          ->  accessUnencryptedData

        # authenticated
          user info: "If the data are authenticated, then modifying them is not possible to achieve."
          ->  write

        & accessUnencryptedData
          user info: "If data is unencrypted then access them."
          ->  accessDecryptedData

        | accessDecryptedData @hidden
          user info: "Intermediate attack step to only allow effects of 'accessUnencryptedData' on data after compromising the encryption credentials or encryption is disabled."
          ->  access,
              readContainedInformationAndData,
              read,
              write,
              delete

        # dataNotPresent
          user info: "It should be used to model the probability of data actually not existing on the connected container (i.e. System, Application, Connection, etc.)."
          developer info: "This attack step is in series with the 'accessUnencryptedData' attack step because there is no reason to defend encrypted data if they do not exist..."
          ->  accessUnencryptedData

        & readContainedInformationAndData
          user info: "From the data, attempt to access also the contained information/data, if exists."
          ->  information.attemptAccess,
              containedData.attemptAccess

        | attemptRead
          user info: "Attempt to read the data."
          ->  read

        | attemptWrite
          user info: "Attempt to write on the data."
          ->  write

        | attemptDelete
           user info: "Attempt to delete the data."
          -> delete

        & read {C}
          user info: "The attacker can read the data."
          ->  containedData.attemptRead,
              readContainedInformationAndData

        & write {I}
          user info: "The attacker can write to the location of the data, effectively deleting it."
          ->  containedData.attemptWrite,
              attemptDelete

        & delete {I, A}
          user info: "The attacker can delete the data."
          ->  containedData.attemptDelete

        | manipulateSignal
          user info: "When an attacker sends a false or manipulated signal."
          ->  signalDestApp.manipulationOfView

        | blockSignal
          user info: "When an attacker blocks a signal from being sent/received."
          ->  signalDestApp.lossOfView
    }

    asset ControlSignal extends Signal
      user info: "A ControlSignal represents control commands are sent between two assets but the medium over which is transmitted is not relevant to the model."
      modeler info: "In the case where control commands are transmitted over a known medium, the IcsControlData asset and the DataInTransit association should be used instead."
    {
        | manipulateSignal @Override
          user info: "When an attacker sends a false or manipulated signal."
          ->  signalActuator.manipulate,
              controlSignalDestApp.manipulationOfControl

        | blockSignal @Override
          user info: "When an attacker blocks a signal from being sent/received."
          ->  signalActuator.block,
              controlSignalDestApp.lossOfControl
    }

    asset IcsData extends Data
      user info: "An ICS Data extends coreLang's Data with OT attack vectors and directionality for non-control information."
      modeler info: "This data represents the non-control information sent over the OT network"
    {
        & successfulWrite  @Override {I}
          user info: "Modifying the data leads to a manipulation of view on the destination(s) and a manipulation of control on the source(s)"
          +>  receiverApp[IcsApplication].manipulationOfView

        & successfulDelete @Override {I, A}
          user info: "Deleting the data leads to a loss of view on the destination(s) and a loss of control on the source(s)"
          +>  receiverApp[IcsApplication].lossOfView

        & successfulDeny @Override {A}
          user info: "Denying access to the data leads to a loss of view on the destination(s) and a loss of control on the source(s)"
          +>  receiverApp[IcsApplication].lossOfView
    }

    asset IcsControlData extends Data
      user info: "An ICS Control Data extends coreLang's Data with OT attack vectors and directionality for control information."
      modeler info: "This data represents the control information sent over the OT network"
    {
        & successfulWrite  @Override {I}
          user info: "Modifying the data leads to a manipulation of view on the destination(s) and a manipulation of control on the source(s)"
          +>  dataActuator.manipulate,
              receiverApp[IcsApplication].manipulationOfControl

        & successfulDelete @Override {I, A}
          user info: "Deleting the data leads to a loss of view on the destination(s) and a loss of control on the source(s)"
          +>  dataActuator.block,
              receiverApp[IcsApplication].lossOfControl

        & successfulDeny @Override {A}
          user info: "Denying access to the data leads to a loss of view on the destination(s) and a loss of control on the source(s)"
          +>  dataActuator.block,
              receiverApp[IcsApplication].lossOfControl
    }
  }

associations {
  IcsSystem [criticalParentSystem]     0..1 <-- CriticalSubsystem           --> *     [criticalSubsystems]     IcsSystem
      user info: "IcsSystems can be nested, a disruption in any of the critical subsystems will be triggered in the parent system as well."
  IcsSystem [redundantParentSystem]    0..1 <-- RedundantSubsystem          --> *     [redundantSubsystems]    IcsSystem
      user info: "IcsSystems can be nested, a disruption will propagate to the parent system only if all of the redundant subsystems are affected by it."
  IcsSystem    [safeguardedSystem]     0..1 <-- SafetyControls              --> 0..1  [sis]            SIS
      user info: "An IcsSystem can have an SIS assigned to it to ensure that it is operating within safe parameters and act if it is not."
  IcsApplication [signalSourceApp]        * <-- AppTransmittedSignal        --> *     [transmittedSignal] Signal
      user info: "Any ics application can transmit a signal."
  IcsApplication [signalDestApp]          * <-- AppReceivedSignal           --> *     [receivedSignal] Signal
      user info: "Any ics application can receive/consume a signal."
  IcsApplication [controlSignalSourceApp] * <-- AppTransmittedControlSignal --> *     [transmittedControlSignal] ControlSignal
      user info: "Any ics application can transmit a signal."
  IcsApplication [controlSignalDestApp]   * <-- AppReceivedControlSignal    --> *     [receivedControlSignal] ControlSignal
      user info: "Any ics application can receive/consume a signal."
  Sensor         [signalSensor]          * <-- SensorSignal                 --> *     [signal]         Signal
      user info: "Any sensor can be associated with a signal over which it can send data."
  Sensor         [dataSensor]            * <-- SensorData                   --> *     [data]           IcsData
      user info: "Any sensor can be associated with data it sends."
  Sensor         [sysSensor]             * <-- SensorBelongsTo              --> *     [system]         IcsSystem
      user info: "A sensor can be associated with a system where it measures a specific parameter."
  Actuator       [signalActuator]        * <-- ActuatorSignal               --> *     [signal]         ControlSignal
      user info: "An actuator can be associated with a signal from which it receives commands."
  Actuator       [dataActuator]          * <-- ActuatorData                 --> *     [data]           IcsControlData
      user info: "An actuator can be associated with data that contain commands."
  Actuator       [sysActuator]           * <-- AcuatorBelongsTo             --> *     [system]         IcsSystem
      user info: "An actuator can be associated with a system on which it actuates."
  IcsApplication [synchronizedApp]       * <-- SynchronizationModule        --> 0..1  [synchronizationModule]    SynchronizationModule
      user info: "Any ics application can have one synchronization module to provide synchronization on the signals sent."
  Signal         [encryptedSignal]       * <-- EncryptionCredentials        --> 0..1  [encryptCreds]   Credentials
      user info: "Encrypted signal can be associated with the relevant encryption credentials."
  Signal         [containerSignal]       * <-- DataContainment              --> *     [containedData]  Data
      user info: "Data can be contained inside a signal."
  Signal         [containerSignal]       * <-- InfoContainment              --> *     [information]    Information
      user info: "A signal can contain information."
}
